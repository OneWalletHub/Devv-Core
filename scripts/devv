#!/usr/bin/python3

import sys
sys.path.append(".")

import zmq
import argparse
import devv_pb2 as dpb
import subprocess
import time
import tempfile

class DevvTransfer(object):
    _address = bytes()
    _coin = 0
    _amount = 0
    _delay = 0

    def __init__(self, address=None, coin=None, amount=None, delay=None):
        print("Transfer: {}:{}:{}:{}".format(address, coin, amount, delay))

        if not coin:
            raise Exception("Coin type must be set")
        if not amount:
            raise Exception("Transfer amount must be set")

        self._address = bytes.fromhex(address)
        self._coin = int(coin)
        self._amount = int(amount)
        self._delay = int(delay)

    def get_pbuf(self):
        pb_tx = dpb.Transfer()
        pb_tx.address = self._address
        pb_tx.coin = self._coin
        pb_tx.amount = self._amount
        pb_tx.delay = self._delay
        return pb_tx


class DevvTransaction(object):
    _operation = dpb.UNKNOWN
    _nonce = bytes()
    _sig = bytes()
    _transfers = []

    def __init__(self, operation, nonce):
        self.set_operation(operation)
        self.set_nonce(nonce)

    def set_nonce(self, nonce):
        try:
            self._nonce = bytes.fromhex(nonce)
            print("Created nonce from hex number")
        except ValueError:
            self._nonce = nonce.encode("utf-8")
            print("Created nonce from string value")

    def set_operation(self, operation):
        op = operation.upper()
        if (op.find("CREATE") >= 0):
            self._operation = dpb.OP_CREATE
        elif(op.find("MODIFY") >= 0):
            self._operation = dpb.OP_MODIFY
        elif(op.find("EXCHANGE") >= 0):
            self._operation = dpb.OP_EXCHANGE
        elif(op.find("DELETE") >= 0):
            self._operation = dpb.OP_DELETE
        else:
            raise("Unknown operation")
        
    def add_transfer(self, address=None, coin=None, amount=None, delay=0, transfer_string=None):
        if (transfer_string):
            print("Adding transfer string")
            self.add_transfer_string(transfer_string)

        if (address):
            print("Adding transfer: {}:{}:{}:{}".format(address, coin, amount, delay))
            self._transfers.append(DevvTransfer(address=address, coin=coin, amount=amount, delay=delay))

    def add_transfer_string(self, transfer_string):
        p = transfer_string.split(":")
        if len(p) < 3:
            raise ValueError('Transfer string must contain "address:coin_type:amount[:delay]"')
        t = DevvTransfer(address=p[0], coin=p[1], amount=p[2], delay=p[3] if len(p) == 4 else 0)
        self._transfers.append(t)

    def get_pbuf(self):
        pb_tx = dpb.Transaction()

        pb_transfers = []
        for transfer in self._transfers:
            pb_transfers.append(transfer.get_pbuf())
        pb_tx.xfers.extend(pb_transfers)

        pb_tx.operation = self._operation
        pb_tx.nonce = self._nonce
        pb_tx.sig = self._sig

        return pb_tx

def create_transaction():
    pass

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='devv command-line utility',
                                     epilog="""
Exit status:\n\
  0 if OK
""")

    parser.add_argument('devv_action', action='store',
                        help='Action to perform - create')
    parser.add_argument('--pbuf-file', action='store', dest='pbuf_file',
                        help='Read proposals and transactions from a protobuf file (default: %(default)s)',
                        default=None, required=False)
    parser.add_argument('--from', action='store', dest='source_address',
                        help='Wallet to transfer coins from (default: %(default)s)',
                        default=None, required=False)
    parser.add_argument('--to', action='store', dest='dest_address',
                        help='Address to transfer coins to (default: %(default)s)',
                        default=None, required=False)
    parser.add_argument('--coin-index', action='store', dest='coin_index', default=1,
                        help='Index of coin type to transfer (default: %(default)s)', type=int)
    parser.add_argument('--transfer-delay', action='store', dest='transfer_delay',
                        help='Transfer delay time in milliseconds (default: %(default)s)',
                        default=0, type=int)
    parser.add_argument('--amount', action='store', dest='amount',
                        help='Amount of coins to transfer (default: %(default)s)', type=int)
    parser.add_argument('--transfer', action='append', dest='transfer',
                        help='A transfer string in the form of "address:coin:amount:delay"')
    parser.add_argument('--nonce', action='store', dest='nonce',
                        help='The string (or hex) representation of a byte array to be stored with this transaction. The parser will attempt to interpret the string as a hexadecimal number; if non-hex characters are used it will fall back to treating the nonce as a string (default: %(default)s)',
                        default="a default nonce string", required=False)
    parser.add_argument('--operation', action='store', dest='operation',
                        help='The type of transaction: CREATE, MODIFY, EXCHANGE, DELETE',
                        required=True)
    parser.add_argument('--private-keyfile', action='store', dest='private_keyfile',
                        help='Location of private key for source address',
                        required=True)
    parser.add_argument('--key-pass', action='store', dest='key_pass',
                        help='NOTE: password for key - TEST ONLY - DO NOT USE REAL PASSWORDS')

    sysgroup = parser.add_argument_group(title='System and networking options')
    sysgroup.add_argument('--tmp-dir', action='store', dest='tmp_dir',
                          help='Directory to hold the temporary transaction protobuf file (default: %(default)s)',
                          default='/tmp')
    sysgroup.add_argument('--announcer-uri', action='store', dest='announcer_uri',
                          help='The ZeroMQ URI of the announcer (default: %(default)s)',
                          default="tcp://localhost:5555", required=False)

    args = parser.parse_args()

    env_file = tempfile.NamedTemporaryFile(dir=args.tmp_dir, suffix="_env.pbuf")
    env_filename = env_file.name

    print("")
    print("-- devv   : {}".format(0.1))
    print("action    : {}".format(args.devv_action))
    print("tx_type   : {}".format(args.operation.upper() if args.operation != None else args.operation))
    print("pbuf_file : {}".format(args.pbuf_file))
    print("from      : {}".format(args.source_address))
    print("to        : {}".format(args.dest_address))
    print("amount    : {}".format(args.amount))
    print("coin_id   : {}".format(args.coin_index))
    print("delay     : {}".format(args.transfer_delay))
    print("p_key     : {}".format(args.private_keyfile))
    print("tmpfile   : {}".format(env_filename))
    print("keypass   : {}".format(args.key_pass))
    print("transfer  : {}".format(args.transfer))
    print("")

    if (args.source_address):
        if (args.amount < 1):
            raise ValueError("Transfer amount must be greater than zero.")
    
    tx = DevvTransaction(args.operation, args.nonce)
    if (args.source_address):
        tx.add_transfer(args.source_address, args.coin_index, -args.amount, args.transfer_delay)
        tx.add_transfer(args.dest_address, args.coin_index, args.amount, args.transfer_delay)

    if (args.transfer):
        for transfer in args.transfer:
            tx.add_transfer(transfer_string=transfer)
    

    pbtx = tx.get_pbuf()

    print("pbuf")
    print(pbtx)

    env = dpb.Envelope()
    env.txs.extend([pbtx])

    #f = open(env_file, "wb")
    env_file.write(env.SerializeToString())

    cmd = ["./devv-sign"]
    cmd.extend(["./devv-sign"])
    cmd.extend(["--quiet-mode"])
    cmd.extend(["--envelope-file", env_filename])
    cmd.extend(["--private-key", args.private_keyfile])
    cmd.extend(["--key-pass", args.key_pass])
    
    print(cmd)

    out = subprocess.check_output(cmd, stderr=subprocess.PIPE)

    sig = out.decode("utf-8").rstrip()

    env_file.close()

    print("sig: "+sig)

    env.txs[0].sig = bytes.fromhex(sig)

    print(env)

    context = zmq.Context()
    socket = context.socket(zmq.REQ)
    socket.connect("tcp://localhost:5555")

    print("Sending message in 3")
    time.sleep(3)

    socket.send(env.SerializeToString())

    print("Done")

    time.sleep(1)
